Prefix(:=<http://www.semanticweb.org/pseudo/ontologies/2014/7/transport.owl#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.semanticweb.org/pseudo/ontologies/2014/7/transport.owl>

Declaration(Class(:Aircraft))
EquivalentClasses(:Aircraft ObjectIntersectionOf(ObjectSomeValuesFrom(:moveOn :Sky) :Vehicle))
SubClassOf(:Aircraft :Vehicle)
Declaration(Class(:AttackAircraft))
SubClassOf(:AttackAircraft :FighterAircraft)
Declaration(Class(:Axile))
SubClassOf(:Axile :VehicleComponent)
Declaration(Class(:Bike))
SubClassOf(:Bike :OnRoadAndOffRoadVehicle)
Declaration(Class(:Boat))
SubClassOf(:Boat :ShipAndVessel)
SubClassOf(:Boat ObjectSomeValuesFrom(:canCarry :Passenger))
Declaration(Class(:Body))
SubClassOf(:Body :VehicleComponent)
Declaration(Class(:Bus))
SubClassOf(:Bus :OnRoadAndOffRoadVehicle)
Declaration(Class(:Car))
SubClassOf(:Car :OnRoadAndOffRoadVehicle)
Declaration(Class(:Cargo))
Declaration(Class(:CargoAircraft))
EquivalentClasses(:CargoAircraft ObjectIntersectionOf(ObjectAllValuesFrom(:canCarry :Cargo) :Aircraft))
SubClassOf(:CargoAircraft :Aircraft)
Declaration(Class(:Cruiser))
SubClassOf(:Cruiser :ShipAndVessel)
SubClassOf(:Cruiser ObjectSomeValuesFrom(:canCarry :Passenger))
Declaration(Class(:DedicatedCivilCargoAircraft))
SubClassOf(:DedicatedCivilCargoAircraft :CargoAircraft)
Declaration(Class(:Diesel))
SubClassOf(:Diesel :Engine)
Declaration(Class(:Driver))
SubClassOf(:Driver :People)
Declaration(Class(:ElectricEngine))
SubClassOf(:ElectricEngine :Engine)
Declaration(Class(:Engine))
SubClassOf(:Engine :VehicleComponent)
Declaration(Class(:FighterAircraft))
SubClassOf(:FighterAircraft :Aircraft)
Declaration(Class(:FixedWing))
SubClassOf(:FixedWing :Wing)
Declaration(Class(:FreightTrain))
EquivalentClasses(:FreightTrain ObjectIntersectionOf(:RailWayTransport ObjectSomeValuesFrom(:hasParts :FreightWagon) ObjectSomeValuesFrom(:hasParts :LocomotiveUnit)))
SubClassOf(:FreightTrain :RailWayTransport)
Declaration(Class(:FreightWagon))
EquivalentClasses(:FreightWagon ObjectIntersectionOf(ObjectSomeValuesFrom(:canCarry :Cargo) :Wagon))
SubClassOf(:FreightWagon :Wagon)
DisjointClasses(:FreightWagon :PassengerWagon)
Declaration(Class(:Helicopter))
SubClassOf(:Helicopter :Aircraft)
SubClassOf(:Helicopter ObjectComplementOf(ObjectSomeValuesFrom(:hasParts :FixedWing)))
DisjointClasses(:Helicopter :WingAircraft)
Declaration(Class(:HighAltitude))
SubClassOf(:HighAltitude :Sky)
Declaration(Class(:HoverCraft))
EquivalentClasses(:HoverCraft ObjectIntersectionOf(owl:Thing ObjectSomeValuesFrom(:moveOn :Water) ObjectSomeValuesFrom(:moveOn ObjectUnionOf(:OnRoad :OffRoad))))
Declaration(Class(:ICE))
SubClassOf(:ICE :Engine)
Declaration(Class(:InterceptorAircraft))
SubClassOf(:InterceptorAircraft :FighterAircraft)
Declaration(Class(:JointCivilMilitaryCargoAircraft))
SubClassOf(:JointCivilMilitaryCargoAircraft :CargoAircraft)
Declaration(Class(:Land))
SubClassOf(:Land :Terrain)
Declaration(Class(:LocomotiveUnit))
SubClassOf(:LocomotiveUnit :RailWayTransport)
Declaration(Class(:MediumAltitude))
SubClassOf(:MediumAltitude :Sky)
Declaration(Class(:Motorcycle))
SubClassOf(:Motorcycle :OnRoadAndOffRoadVehicle)
Declaration(Class(:MultiRoleAircraft))
SubClassOf(:MultiRoleAircraft :FighterAircraft)
Declaration(Class(:NarrowBody))
SubClassOf(:NarrowBody :PassengerAircraft)
Declaration(Class(:OffRoad))
SubClassOf(:OffRoad :Land)
Declaration(Class(:OnRoad))
SubClassOf(:OnRoad :Land)
Declaration(Class(:OnRoadAndOffRoadVehicle))
EquivalentClasses(:OnRoadAndOffRoadVehicle ObjectIntersectionOf(ObjectSomeValuesFrom(:moveOn ObjectUnionOf(:OnRoad :OffRoad)) :Vehicle))
SubClassOf(:OnRoadAndOffRoadVehicle :Vehicle)
Declaration(Class(:OnWaterSuface))
SubClassOf(:OnWaterSuface :Water)
DisjointClasses(:OnWaterSuface :UnderWater)
Declaration(Class(:Passenger))
SubClassOf(:Passenger :People)
Declaration(Class(:PassengerAircraft))
EquivalentClasses(:PassengerAircraft ObjectIntersectionOf(ObjectAllValuesFrom(:canCarry :Passenger) :Aircraft))
SubClassOf(:PassengerAircraft :Aircraft)
Declaration(Class(:PassengerTrain))
EquivalentClasses(:PassengerTrain ObjectIntersectionOf(:RailWayTransport ObjectSomeValuesFrom(:hasParts :LocomotiveUnit) ObjectSomeValuesFrom(:hasParts :PassengerWagon)))
SubClassOf(:PassengerTrain :RailWayTransport)
Declaration(Class(:PassengerWagon))
EquivalentClasses(:PassengerWagon ObjectIntersectionOf(ObjectSomeValuesFrom(:canCarry :Passenger) :Wagon))
SubClassOf(:PassengerWagon :Wagon)
DisjointClasses(:PassengerWagon :FreightWagon)
Declaration(Class(:People))
Declaration(Class(:Pilot))
SubClassOf(:Pilot :People)
Declaration(Class(:Rail))
SubClassOf(:Rail :Land)
Declaration(Class(:RailWayTransport))
EquivalentClasses(:RailWayTransport ObjectIntersectionOf(ObjectSomeValuesFrom(:moveOn :Rail) :Vehicle))
SubClassOf(:RailWayTransport :Vehicle)
Declaration(Class(:Rotor))
SubClassOf(:Rotor :VehicleComponent)
Declaration(Class(:RotorBlade))
SubClassOf(:RotorBlade :VehicleComponent)
Declaration(Class(:ShipAndVessel))
EquivalentClasses(:ShipAndVessel ObjectIntersectionOf(ObjectSomeValuesFrom(:moveOn :Water) :Vehicle))
SubClassOf(:ShipAndVessel :Vehicle)
Declaration(Class(:Sky))
SubClassOf(:Sky :Terrain)
Declaration(Class(:Space))
SubClassOf(:Space :Terrain)
Declaration(Class(:Sprocket))
SubClassOf(:Sprocket :VehicleComponent)
Declaration(Class(:Steam))
SubClassOf(:Steam :Engine)
Declaration(Class(:Terrain))
EquivalentClasses(:Terrain ObjectUnionOf(:Land :Sky :Space :Water))
Declaration(Class(:Truck))
EquivalentClasses(:Truck ObjectIntersectionOf(ObjectSomeValuesFrom(:canCarry :Cargo) :OnRoadAndOffRoadVehicle))
SubClassOf(:Truck :OnRoadAndOffRoadVehicle)
Declaration(Class(:UnderWater))
SubClassOf(:UnderWater :Water)
DisjointClasses(:UnderWater :OnWaterSuface)
Declaration(Class(:Vehicle))
EquivalentClasses(:Vehicle ObjectIntersectionOf(ObjectSomeValuesFrom(:moveOn :Terrain) owl:Thing))
Declaration(Class(:VehicleComponent))
EquivalentClasses(:VehicleComponent ObjectIntersectionOf(ObjectSomeValuesFrom(:isPartOf owl:Thing) owl:Thing))
Declaration(Class(:Vessel))
EquivalentClasses(:Vessel ObjectIntersectionOf(ObjectAllValuesFrom(:canCarry :Cargo) :ShipAndVessel))
SubClassOf(:Vessel :ShipAndVessel)
Declaration(Class(:Wagon))
EquivalentClasses(:Wagon ObjectIntersectionOf(ObjectSomeValuesFrom(:isPartOf ObjectUnionOf(:PassengerTrain :FreightTrain)) :VehicleComponent))
SubClassOf(:Wagon :VehicleComponent)
Declaration(Class(:Water))
SubClassOf(:Water :Terrain)
Declaration(Class(:Wheel))
SubClassOf(:Wheel :VehicleComponent)
Declaration(Class(:WideBody))
SubClassOf(:WideBody :PassengerAircraft)
Declaration(Class(:Wing))
SubClassOf(:Wing :VehicleComponent)
Declaration(Class(:WingAircraft))
EquivalentClasses(:WingAircraft ObjectIntersectionOf(ObjectSomeValuesFrom(:hasParts :FixedWing) :Aircraft))
SubClassOf(:WingAircraft :Aircraft)
DisjointClasses(:WingAircraft :Helicopter)
Declaration(ObjectProperty(:canBeCarriedBy))
InverseObjectProperties(:canBeCarriedBy :canCarry)
Declaration(ObjectProperty(:canCarry))
InverseObjectProperties(:canBeCarriedBy :canCarry)
ObjectPropertyDomain(:canCarry :Vehicle)
Declaration(ObjectProperty(:hasParts))
InverseObjectProperties(:isPartOf :hasParts)
ObjectPropertyDomain(:hasParts ObjectUnionOf(:VehicleComponent :Vehicle))
ObjectPropertyRange(:hasParts ObjectUnionOf(:VehicleComponent :Vehicle))
Declaration(ObjectProperty(:isPartOf))
SubObjectPropertyOf(:isPartOf owl:topObjectProperty)
InverseObjectProperties(:isPartOf :hasParts)
ObjectPropertyDomain(:isPartOf ObjectUnionOf(:VehicleComponent :Vehicle))
ObjectPropertyRange(:isPartOf ObjectUnionOf(:VehicleComponent :Vehicle))
Declaration(ObjectProperty(:moveOn))
ObjectPropertyDomain(:moveOn :Vehicle)
ObjectPropertyRange(:moveOn :Terrain)
Declaration(DataProperty(:canCarry))
Declaration(DataProperty(:canCarryCargo))
SubDataPropertyOf(:canCarryCargo :canCarry)
DataPropertyRange(:canCarryCargo xsd:unsignedLong)
Declaration(DataProperty(:canCarryPassenger))
SubDataPropertyOf(:canCarryPassenger :canCarry)
DataPropertyRange(:canCarryPassenger xsd:positiveInteger)
Declaration(DataProperty(:hasNumberOf))
Declaration(DataProperty(:hasNumberOfRotors))
SubDataPropertyOf(:hasNumberOfRotors :hasNumberOf)
FunctionalDataProperty(:hasNumberOfRotors)
DataPropertyDomain(:hasNumberOfRotors :Vehicle)
DataPropertyRange(:hasNumberOfRotors xsd:integer)
Declaration(DataProperty(:hasNumberOfSeats))
SubDataPropertyOf(:hasNumberOfSeats :hasNumberOf)
FunctionalDataProperty(:hasNumberOfSeats)
DataPropertyDomain(:hasNumberOfSeats :Vehicle)
DataPropertyRange(:hasNumberOfSeats xsd:integer)
Declaration(DataProperty(:hasNumberOfWheels))
SubDataPropertyOf(:hasNumberOfWheels :hasNumberOf)
FunctionalDataProperty(:hasNumberOfWheels)
DataPropertyDomain(:hasNumberOfWheels :OnRoadAndOffRoadVehicle)
DataPropertyRange(:hasNumberOfWheels xsd:integer)
Declaration(DataProperty(:hasNumberOfWings))
SubDataPropertyOf(:hasNumberOfWings :hasNumberOf)
FunctionalDataProperty(:hasNumberOfWings)
DataPropertyDomain(:hasNumberOfWings :Aircraft)
DataPropertyRange(:hasNumberOfWings xsd:integer)
Declaration(NamedIndividual(:A10))
ClassAssertion(:Vehicle :A10)
Declaration(NamedIndividual(:Airbus_A380))
ClassAssertion(:Vehicle :Airbus_A380)
Declaration(NamedIndividual(:AudiQ7))
ClassAssertion(:Vehicle :AudiQ7)
Declaration(NamedIndividual(:BMWi5))
ClassAssertion(:Vehicle :BMWi5)
Declaration(NamedIndividual(:Container))
ClassAssertion(:Cargo :Container)
Declaration(NamedIndividual(:EC145))
ClassAssertion(:Vehicle :EC145)
Declaration(NamedIndividual(:F16))
ClassAssertion(:Vehicle :F16)
Declaration(NamedIndividual(:Freightliner_M2))
ClassAssertion(:Vehicle :Freightliner_M2)
Declaration(NamedIndividual(:HondaCBR250))
ClassAssertion(:Vehicle :HondaCBR250)
Declaration(NamedIndividual(:HondaDream))
ClassAssertion(:Vehicle :HondaDream)
Declaration(NamedIndividual(:Martin107))
ClassAssertion(:Vehicle :Martin107)
Declaration(NamedIndividual(:QueenMarry2))
ClassAssertion(:Vehicle :QueenMarry2)
Declaration(NamedIndividual(:SingleCylinder))
ClassAssertion(:ICE :SingleCylinder)
Declaration(NamedIndividual(:Titanic))
ClassAssertion(:Vehicle :Titanic)
Declaration(NamedIndividual(:YellowBus))
ClassAssertion(:Vehicle :YellowBus)
DLSafeRule(Body(ClassAtom(:OnRoadAndOffRoadVehicle Variable(<urn:swrl#v>)) DataPropertyAtom(:hasNumberOfWheels Variable(<urn:swrl#v>) Variable(<urn:swrl#w>)) BuiltInAtom(<http://www.w3.org/2003/11/swrlb#greaterThanOrEqual> Variable(<urn:swrl#w>) "4"^^xsd:integer))Head(ClassAtom(ObjectUnionOf(:Bus :Car :Truck) Variable(<urn:swrl#v>))))
DLSafeRule(Body(ClassAtom(ObjectUnionOf(:Bus :Car :Truck) Variable(<urn:swrl#v>)) DataPropertyAtom(:hasNumberOfSeats Variable(<urn:swrl#v>) Variable(<urn:swrl#s>)) BuiltInAtom(<http://www.w3.org/2003/11/swrlb#greaterThanOrEqual> Variable(<urn:swrl#s>) "20"^^xsd:integer))Head(ClassAtom(:Bus Variable(<urn:swrl#v>))))
DLSafeRule(Body(ClassAtom(ObjectUnionOf(:Bus :Car :Truck) Variable(<urn:swrl#v>)) DataRangeAtom(DatatypeRestriction(xsd:integer xsd:minInclusive "4"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer) Variable(<urn:swrl#s>)) DataPropertyAtom(:hasNumberOfSeats Variable(<urn:swrl#v>) Variable(<urn:swrl#s>)))Head(ClassAtom(:Car Variable(<urn:swrl#v>))))
DLSafeRule(Body(ClassAtom(:OnRoadAndOffRoadVehicle Variable(<urn:swrl#v>)) DataPropertyAtom(:hasNumberOfWheels Variable(<urn:swrl#v>) Variable(<urn:swrl#w>)) BuiltInAtom(<http://www.w3.org/2003/11/swrlb#lessThan> Variable(<urn:swrl#w>) "4"^^xsd:integer))Head(ClassAtom(ObjectUnionOf(:Motorcycle :Bike) Variable(<urn:swrl#v>))))
DLSafeRule(Body(DataPropertyAtom(:canCarryCargo Variable(<urn:swrl#v>) "true"^^xsd:boolean) ClassAtom(ObjectUnionOf(:Bus :Car :Truck) Variable(<urn:swrl#v>)))Head(ClassAtom(:Truck Variable(<urn:swrl#v>))))
DisjointClasses(:OffRoad :OnRoad :Rail)
DisjointClasses(:Land :Sky :Space :Water)
)
